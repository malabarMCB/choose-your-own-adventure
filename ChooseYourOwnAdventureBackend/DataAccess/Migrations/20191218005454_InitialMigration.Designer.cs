// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(QuestionsDbContext))]
    [Migration("20191218005454_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataAccess.Entities.QuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("NegativeAnswerQuestionId")
                        .HasColumnType("int");

                    b.Property<int?>("PositiveAnswerQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NegativeAnswerQuestionId");

                    b.HasIndex("PositiveAnswerQuestionId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NegativeAnswerQuestionId = 3,
                            PositiveAnswerQuestionId = 2,
                            Text = "Do I want a doughnut?"
                        },
                        new
                        {
                            Id = 2,
                            NegativeAnswerQuestionId = 5,
                            PositiveAnswerQuestionId = 4,
                            Text = "Do I deserve it?"
                        },
                        new
                        {
                            Id = 3,
                            Text = "Maybe you want an apple?"
                        },
                        new
                        {
                            Id = 4,
                            NegativeAnswerQuestionId = 7,
                            PositiveAnswerQuestionId = 6,
                            Text = "Are you sure?"
                        },
                        new
                        {
                            Id = 5,
                            NegativeAnswerQuestionId = 9,
                            PositiveAnswerQuestionId = 8,
                            Text = "Is it a good doughnut?"
                        },
                        new
                        {
                            Id = 6,
                            NegativeAnswerQuestionId = 11,
                            PositiveAnswerQuestionId = 10,
                            Text = "Are you really sure?"
                        },
                        new
                        {
                            Id = 7,
                            Text = "Do jumping jacks first."
                        },
                        new
                        {
                            Id = 8,
                            Text = "What are you waiting for? Grab it now."
                        },
                        new
                        {
                            Id = 9,
                            Text = "Wait `till you find a sinful, unforgettable doughnut."
                        },
                        new
                        {
                            Id = 10,
                            Text = "Get it."
                        },
                        new
                        {
                            Id = 11,
                            Text = "Why not to take a cake?"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.QuestionEntity", b =>
                {
                    b.HasOne("DataAccess.Entities.QuestionEntity", "NegativeAnswerQuestion")
                        .WithMany("InverseNavigationNegativeAnswerQuestion")
                        .HasForeignKey("NegativeAnswerQuestionId");

                    b.HasOne("DataAccess.Entities.QuestionEntity", "PositiveAnswerQuestion")
                        .WithMany("InverseNavigationPositiveAnswerQuestion")
                        .HasForeignKey("PositiveAnswerQuestionId");
                });
#pragma warning restore 612, 618
        }
    }
}
